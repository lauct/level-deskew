#!/bin/bash

##################################
# PARAMETERS OF THE SHELL SCRIPT #
##################################

# input file
IN_FILE=""
# input file font encode, default local encode
IN_ENCODE=""
# output file font encode, default local encode
OUT_ENCODE=""
# If both of the parameters are NULL, assume the output and the input
# are locale font encode. If one has a value, the other must has a value too.

#######################################
# VARIABLES USED IN THIS SHELL SCRIPT #
#######################################

# local encode
LOCALE_ENCODE=""
# input file is converted to locale encoding, and saved in this file
IN_TMP_FILE=""
# ${IN_TMP_FILE} is converted from ass form to srt form, and save in this file in locale encoding
OUT_TMP_FILE=""



############
# FUNCTION #
############
usage()
{
	echo "Usage:" 1>&2
	echo "      `basename $0` [OPTINT]... <FILE>" 1>&2
	echo "      -f    input file character encoding" 1>&2
	echo "      -t    output character encoding" 1>&2
	echo "      -l    list supported coded character" 1>&2
	echo "<FILE> is the ass subtitle file to be converted to srt subtitle file. The processed content is output to the standard output." 1>&2
	echo "If no input file encoding specified, the encoding is autodetected \"enca\" command." 1>&2
	echo "If no output character encoding specified, the encoding is determined by \"locale\" command." 1>&2
	echo "e.g.:  ass2srt -f CP936 -t UTF-8 sub09.ass > sub09.srt" 1>&2
}

parse_params()
{
	# EXTRACT PARAMETERS
	# track the current state
	local STATE=0
	# STATE: 0, FILE NAME INPUT STATE
	#	1, INPUT ENCODE INPUT STATE
	#	2, OUTPUT ENCODE INPUT STATE
	#	others, UNDEFINED
	while [ x"$1" != x ] ; do
		case $1 in
		-h | --help)
			usage
			exit 0
			;;
		-l)
			iconv -l
			exit 0
			;;
		-f)
			STATE=1
			;;
		-t)
			STATE=2
			;;
		-*)
			echo "No such option $1" 1>&2
			usage
			exit 0
			;;
		*)
			case ${STATE} in
			0)
				if [ x"${IN_FILE}" != x ] ; then
					echo -e "You have specified more than one file: ${IN_FILE} $1\nMaybe more..." 1>&2
					usage
					exit 0
				fi
				IN_FILE=$1
				;;
			1)
				if [ x"${IN_ENCODE}" != x ] ; then
					echo -e "You have specified more than one input encode: ${IN_ENCODE} $1\nMaybe more..." 1>&2
					usage
					exit 0
				fi
				IN_ENCODE=$1
				STATE=0
				;;
			2)
				if [ x"${OUT_ENCODE}" != x ] ; then
					echo -e "You have specified more than one output encode: ${OUT_ENCODE} $1\nMaybe more..." 1>&2
					usage
					exit 0
				fi
				OUT_ENCODE=$1
				STATE=0
				;;
			*)
				echo -e "INVALID STATE\nCHECK THE SCRIPT\n" 1>&2
				exit 0
				;;
			esac	#STATE
		esac	# $1
		shift
	done


}

# get locale character encode from LC_CTYPE
# if the encode can not be got, use "C" instead
locale_encode()
{
	local encode=$(locale | grep -e "LC_CTYPE" | sed -e 's/^.*\.\(.*\)"$/\1/g')
	if [ x${encode} = x ] ; then
		encode="C"
	fi
	echo ${encode}
}

# convert file $4 from encoding $2 to encoding $3
# and output the result to file $5
# $1 determines whether the output is to standard output or file $5
conv_enc()
{
	if [ $1 -ne 0 ] ; then
		iconv -f $2 -t $3 "$4" > "$5"
	else
		iconv -f $2 -t $3 "$4"
	fi
	if [ $? -ne 0 ] ; then
		echo "Executing iconv failed!" 1>&2
		echo "This error probably caused by specifying a wrong input file encode." 1>&2
	fi
}

get_mypath()
{
	local bn=`basename $0`
	echo $0 | sed "s/\(^.*\)${bn}/\1/"
}

########
# MAIN #
########

parse_params "$@"

# Convert input file encode to locale encode 
LOCALE_ENCODE=$(locale_encode)
echo "locale encode:${LOCALE_ENCODE}" 1>&2

if [ x${OUT_ENCODE} = x ] ; then
	OUT_ENCODE=${LOCALE_ENCODE}
fi

if [ x${IN_ENCODE} = x ] ; then
	IN_ENCODE=$(enca -i "${IN_FILE}")
fi

echo "Input file: ${IN_FILE}" 1>&2
echo "Input file encode: ${IN_ENCODE}" 1>&2
echo "Output encode: ${OUT_ENCODE}" 1>&2

if [ -z ${IN_ENCODE} -o -z ${OUT_ENCODE} ]; then
	# this should not happen
	echo "None of the parameter should be empty" 1>&2
	exit 1
fi

# next create a temporary file
IN_TMP_FILE=`mktemp`
conv_enc 1 ${IN_ENCODE} ${LOCALE_ENCODE} "${IN_FILE}" "${IN_TMP_FILE}"

# NOW TIME TO CONVERT THE MID FILE TO THE FINAL OUTPUT
# and put the content to the stdard output
OUT_TMP_FILE=`mktemp`
awk -f $(get_mypath)/ass2srt.awk "${IN_TMP_FILE}" > "${OUT_TMP_FILE}"
if [ $? -ne 0 ] ; then
	echo "Executing awk failed!" 1>&2
	echo "This should not happen. Check if your ass2srt.awk file has been changed." 1>&2
	exit 1
fi

conv_enc 0 ${LOCALE_ENCODE} ${OUT_ENCODE} "${OUT_TMP_FILE}"

# NOW REMOVE THE temporary intermediate file and exit
rm "${IN_TMP_FILE}"
rm "${OUT_TMP_FILE}"

exit 0
